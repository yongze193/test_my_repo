diff --git a/mmengine/runner/loops.py b/mmengine/runner/loops.py
index 5a678db..1fe95f0 100644
--- a/mmengine/runner/loops.py
+++ b/mmengine/runner/loops.py
@@ -7,6 +7,7 @@ from typing import Dict, List, Optional, Sequence, Tuple, Union
 import torch
 from torch.utils.data import DataLoader
 
+from mmengine.dist import get_dist_info
 from mmengine.evaluator import Evaluator
 from mmengine.logging import HistoryBuffer, print_log
 from mmengine.registry import LOOPS
@@ -47,9 +48,11 @@ class EpochBasedTrainLoop(BaseLoop):
         self._max_epochs = int(max_epochs)
         assert self._max_epochs == max_epochs, \
             f'`max_epochs` should be a integer number, but get {max_epochs}.'
+        self._each_iters = len(self.dataloader)
         self._max_iters = self._max_epochs * len(self.dataloader)
         self._epoch = 0
         self._iter = 0
+        self.train_time = []
         self.val_begin = val_begin
         self.val_interval = val_interval
         # This attribute will be updated by `EarlyStoppingHook`
@@ -104,16 +107,30 @@ class EpochBasedTrainLoop(BaseLoop):
                          or self._epoch == self._max_epochs)):
                 self.runner.val_loop.run()
 
+        rank, world_size = get_dist_info()
+        if rank == 0:
+            batch_size = self.runner._train_dataloader.batch_size
+            FPS = (world_size * batch_size * self._max_iters) / sum(self.train_time)
+            self.runner.logger.info(f'Epoch(train) [average] FPS: {FPS}')
+
         self.runner.call_hook('after_train')
         return self.runner.model
 
     def run_epoch(self) -> None:
         """Iterate one epoch."""
         self.runner.call_hook('before_train_epoch')
+        rank, world_size = get_dist_info()
+        if rank == 0:
+            train_time_start = time.time()
         self.runner.model.train()
         for idx, data_batch in enumerate(self.dataloader):
             self.run_iter(idx, data_batch)
-
+        if rank == 0:
+            train_time_end = time.time()
+            self.train_time.append(train_time_end - train_time_start)
+            batch_size = self.runner._train_dataloader.batch_size
+            FPS = (world_size * batch_size * self._each_iters) / self.train_time[-1]
+            self.runner.logger.info(f'Epoch(train) [{self._epoch}] FPS: {FPS}')
         self.runner.call_hook('after_train_epoch')
         self._epoch += 1
 
